// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/identitie.proto

package fleet_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentitieServiceClient is the client API for IdentitieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentitieServiceClient interface {
	CreateIdentitie(ctx context.Context, in *CreateIdentitieRequest, opts ...grpc.CallOption) (*CreateIdentitieResponse, error)
	GetIdentitie(ctx context.Context, in *ReadIdentitieRequest, opts ...grpc.CallOption) (*ReadIdentitieResponse, error)
	GetIdentities(ctx context.Context, in *ReadIdentitiesRequest, opts ...grpc.CallOption) (*ReadIdentitiesResponse, error)
	UpdateIdentitie(ctx context.Context, in *UpdateIdentitieRequest, opts ...grpc.CallOption) (*UpdateIdentitieResponse, error)
	DeleteIdentitie(ctx context.Context, in *DeleteIdentitieRequest, opts ...grpc.CallOption) (*DeleteIdentitieResponse, error)
}

type identitieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitieServiceClient(cc grpc.ClientConnInterface) IdentitieServiceClient {
	return &identitieServiceClient{cc}
}

func (c *identitieServiceClient) CreateIdentitie(ctx context.Context, in *CreateIdentitieRequest, opts ...grpc.CallOption) (*CreateIdentitieResponse, error) {
	out := new(CreateIdentitieResponse)
	err := c.cc.Invoke(ctx, "/proto.IdentitieService/CreateIdentitie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitieServiceClient) GetIdentitie(ctx context.Context, in *ReadIdentitieRequest, opts ...grpc.CallOption) (*ReadIdentitieResponse, error) {
	out := new(ReadIdentitieResponse)
	err := c.cc.Invoke(ctx, "/proto.IdentitieService/GetIdentitie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitieServiceClient) GetIdentities(ctx context.Context, in *ReadIdentitiesRequest, opts ...grpc.CallOption) (*ReadIdentitiesResponse, error) {
	out := new(ReadIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/proto.IdentitieService/GetIdentities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitieServiceClient) UpdateIdentitie(ctx context.Context, in *UpdateIdentitieRequest, opts ...grpc.CallOption) (*UpdateIdentitieResponse, error) {
	out := new(UpdateIdentitieResponse)
	err := c.cc.Invoke(ctx, "/proto.IdentitieService/UpdateIdentitie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitieServiceClient) DeleteIdentitie(ctx context.Context, in *DeleteIdentitieRequest, opts ...grpc.CallOption) (*DeleteIdentitieResponse, error) {
	out := new(DeleteIdentitieResponse)
	err := c.cc.Invoke(ctx, "/proto.IdentitieService/DeleteIdentitie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitieServiceServer is the server API for IdentitieService service.
// All implementations must embed UnimplementedIdentitieServiceServer
// for forward compatibility
type IdentitieServiceServer interface {
	CreateIdentitie(context.Context, *CreateIdentitieRequest) (*CreateIdentitieResponse, error)
	GetIdentitie(context.Context, *ReadIdentitieRequest) (*ReadIdentitieResponse, error)
	GetIdentities(context.Context, *ReadIdentitiesRequest) (*ReadIdentitiesResponse, error)
	UpdateIdentitie(context.Context, *UpdateIdentitieRequest) (*UpdateIdentitieResponse, error)
	DeleteIdentitie(context.Context, *DeleteIdentitieRequest) (*DeleteIdentitieResponse, error)
	mustEmbedUnimplementedIdentitieServiceServer()
}

// UnimplementedIdentitieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentitieServiceServer struct {
}

func (UnimplementedIdentitieServiceServer) CreateIdentitie(context.Context, *CreateIdentitieRequest) (*CreateIdentitieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentitie not implemented")
}
func (UnimplementedIdentitieServiceServer) GetIdentitie(context.Context, *ReadIdentitieRequest) (*ReadIdentitieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentitie not implemented")
}
func (UnimplementedIdentitieServiceServer) GetIdentities(context.Context, *ReadIdentitiesRequest) (*ReadIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentities not implemented")
}
func (UnimplementedIdentitieServiceServer) UpdateIdentitie(context.Context, *UpdateIdentitieRequest) (*UpdateIdentitieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentitie not implemented")
}
func (UnimplementedIdentitieServiceServer) DeleteIdentitie(context.Context, *DeleteIdentitieRequest) (*DeleteIdentitieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentitie not implemented")
}
func (UnimplementedIdentitieServiceServer) mustEmbedUnimplementedIdentitieServiceServer() {}

// UnsafeIdentitieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentitieServiceServer will
// result in compilation errors.
type UnsafeIdentitieServiceServer interface {
	mustEmbedUnimplementedIdentitieServiceServer()
}

func RegisterIdentitieServiceServer(s grpc.ServiceRegistrar, srv IdentitieServiceServer) {
	s.RegisterService(&IdentitieService_ServiceDesc, srv)
}

func _IdentitieService_CreateIdentitie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentitieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitieServiceServer).CreateIdentitie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IdentitieService/CreateIdentitie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitieServiceServer).CreateIdentitie(ctx, req.(*CreateIdentitieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitieService_GetIdentitie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIdentitieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitieServiceServer).GetIdentitie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IdentitieService/GetIdentitie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitieServiceServer).GetIdentitie(ctx, req.(*ReadIdentitieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitieService_GetIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitieServiceServer).GetIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IdentitieService/GetIdentities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitieServiceServer).GetIdentities(ctx, req.(*ReadIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitieService_UpdateIdentitie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentitieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitieServiceServer).UpdateIdentitie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IdentitieService/UpdateIdentitie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitieServiceServer).UpdateIdentitie(ctx, req.(*UpdateIdentitieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitieService_DeleteIdentitie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentitieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitieServiceServer).DeleteIdentitie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IdentitieService/DeleteIdentitie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitieServiceServer).DeleteIdentitie(ctx, req.(*DeleteIdentitieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentitieService_ServiceDesc is the grpc.ServiceDesc for IdentitieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentitieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IdentitieService",
	HandlerType: (*IdentitieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentitie",
			Handler:    _IdentitieService_CreateIdentitie_Handler,
		},
		{
			MethodName: "GetIdentitie",
			Handler:    _IdentitieService_GetIdentitie_Handler,
		},
		{
			MethodName: "GetIdentities",
			Handler:    _IdentitieService_GetIdentities_Handler,
		},
		{
			MethodName: "UpdateIdentitie",
			Handler:    _IdentitieService_UpdateIdentitie_Handler,
		},
		{
			MethodName: "DeleteIdentitie",
			Handler:    _IdentitieService_DeleteIdentitie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identitie.proto",
}
